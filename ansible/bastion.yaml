---
- name: Bastion Configuration
  hosts: tag_Bastion_1
  gather_facts: no
  vars:
    ansible_ssh_private_key_file: ./output/kube.pem
    ansible_ssh_user: ubuntu
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - secret.yml
  tasks:
    - name: Copy ca-config.json
      template:
        src: ./templates/ca-config.json
        dest: '/home/{{ ansible_ssh_user }}/ca-config.json'
        mode: '0644'
    
    - name: Copy ca-csr.json
      template:
        src: ./templates/ca-csr.json
        dest: '/home/{{ ansible_ssh_user }}/ca-csr.json'
        mode: '0644'
    
    - name: Check that the ca-key exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/ca-key.pem'
      register: ca-key
    
    - name: Check that the ca.pem exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/ca.pem'
      register: ca
    
    - name: Generate the CA configuration file, certificate, and private key
      shell: "cfssl gencert -initca ca-csr.json | cfssljson -bare ca"
      when: ca_key.stat.exists == False and ca.stat.exists == False
    
    - name: Copy admin-csr.json
      template:
        src: ./templates/admin-csr.json
        dest: '/home/{{ ansible_ssh_user }}/admin-csr.json'
        mode: '0644'
    
    - name: Check that the admin-key.pem exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/admin-key.pem'
      register: admin_key
    
    - name: Check that the admin.pem exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/admin.pem'
      register: admin
    
    - name: Generate the admin client certificate and private key
      shell: >
        cfssl gencert \
          -ca=ca.pem \
          -ca-key=ca-key.pem \
          -config=ca-config.json \
          -profile=kubernetes \
          admin-csr.json | cfssljson -bare admin
      when: admin_key.stat.exists == False and admin.stat.exists == False
    
    - name: Get worker nodes
      ec2_instance_facts:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        filters:
          "tag:type": Worker
      register: worker_nodes
    
    - name: Create the client certificates
      import_tasks: ./tasks/client_csr.yaml
      loop: '{{ worker_nodes.instances }}'

    - name: Copy kube-controller-manager-csr.json
      template:
        src: ./templates/kube-controller-manager-csr.json
        dest: '/home/{{ ansible_ssh_user }}/kube-controller-manager-csr.json'
        mode: '0644'
    
    - name: Check that the kube-controller-manager-key exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/kube-controller-manager-key.pem'
      register: kube-controller-manager-key
    
    - name: Check that the kube-controller-manager.pem exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/kube-controller-manager.pem'
      register: kube-controller-manager

    - name: Generate the Control Manager Client Certificate
      shell: >
        cfssl gencert \
          -ca=ca.pem \
          -ca-key=ca-key.pem \
          -config=ca-config.json \
          -profile=kubernetes \
          kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager
      when: kube-controller-manager-key.stat.exists == False and kube-controller-manager.stat.exists == False

    - name: Copy kube-proxy-csr.json
      template:
        src: ./templates/kube-proxy-csr.json
        dest: '/home/{{ ansible_ssh_user }}/kube-proxy-csr.json'
        mode: '0644'
    
    - name: Check that the kube-proxy-key exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/kube-proxy-key.pem'
      register: kube-proxy-key
    
    - name: Check that the kube-proxy.pem exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/kube-proxy.pem'
      register: kube-proxy

    - name: Generate the Control Manager Client Certificate
      shell: >
        cfssl gencert \
          -ca=ca.pem \
          -ca-key=ca-key.pem \
          -config=ca-config.json \
          -profile=kubernetes \
          kube-proxy-csr.json | cfssljson -bare kube-proxy
      when: kube-proxy-key.stat.exists == False and kube-proxy.stat.exists == False

    - name: Copy kube-scheduler-csr.json
      template:
        src: ./templates/kube-scheduler-csr.json
        dest: '/home/{{ ansible_ssh_user }}/kube-scheduler-csr.json'
        mode: '0644'
    
    - name: Check that the kube-scheduler-key exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/kube-scheduler-key.pem'
      register: kube-scheduler-key
    
    - name: Check that the kube-scheduler.pem exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/kube-scheduler.pem'
      register: kube-scheduler

    - name: Generate the Control Manager Client Certificate
      shell: >
        cfssl gencert \
          -ca=ca.pem \
          -ca-key=ca-key.pem \
          -config=ca-config.json \
          -profile=kubernetes \
          kube-scheduler-csr.json | cfssljson -bare kube-scheduler
      when: kube-scheduler-key.stat.exists == False and kube-scheduler.stat.exists == False

    - name: Copy kubernetes-csr.json
      template:
        src: ./templates/kubernetes-csr.json
        dest: '/home/{{ ansible_ssh_user }}/kubernetes-csr.json'
        mode: '0644'
    
    - name: Check that the kubernetes-key exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/kubernetes-key.pem'
      register: kubernetes-key
    
    - name: Check that the kubernetes.pem exists
      stat:
        path: '/home/{{ ansible_ssh_user }}/kubernetes.pem'
      register: kubernetes

    - name: Generate the Control Manager Client Certificate
      shell: >
        cfssl gencert \
          -ca=ca.pem \
          -ca-key=ca-key.pem \
          -config=ca-config.json \
          -hostname=127.0.0.1,kubernetes.default,*.{{ public_domain }},*.{{ private_domain }} \
          -profile=kubernetes \
          kubernetes-csr.json | cfssljson -bare kubernetes
      when: kubernetes-key.stat.exists == False and kubernetes.stat.exists == False