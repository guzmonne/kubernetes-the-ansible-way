---
- name: Create the Masters group
  hosts: local
  connection: local
  gather_facts: no
  vars_files:
    - secret.yml
  vars:
    node_type: master
    group_name: masters
  roles:
    - create_dynamic_node_group

- name: Create the Masters group
  hosts: local
  connection: local
  gather_facts: no
  vars_files:
    - secret.yml
  vars:
    node_type: worker
    group_name: workers
  roles:
    - create_dynamic_node_group

- name: Kubeconfigs creation
  hosts: local
  connection: local
  gather_facts: no
  vars_files:
    - secret.yml
  tasks:
    - name: Check if the kube-proxy.kubeconfig file exists
      stat:
        path: './kubeconfigs/kube-proxy.kubeconfig'
      register: kube_proxy

    - name: Create the kube-proxy.kubeconfig file
      shell: >
        kubectl config set-cluster {{ project_name }} \
          --certificate-authority=./tls/ca.pem \
          --embed-certs=true \
          --server=https://{{ kubernetes_api_public_uri }} \
          --kubeconfig=./kubeconfigs/kube-proxy.kubeconfig ;\

        kubectl config set-credentials system:kube-proxy \
          --client-certificate=./tls/kube-proxy.pem \
          --client-key=./tls/kube-proxy-key.pem \
          --embed-certs=true \
          --kubeconfig=./kubeconfigs/kube-proxy.kubeconfig ;\

        kubectl config set-context default \
          --cluster={{ project_name }} \
          --user=system:kube-proxy \
          --kubeconfig=./kubeconfigs/kube-proxy.kubeconfig

        kubectl config use-context default \
          --kubeconfig=./kubeconfigs/kube-proxy.kubeconfig
      when: kube_proxy.stat.exists == False

    - name: Check if the kube-controller-manager.kubeconfig file exists
      stat:
        path: './kubeconfigs/kube-controller-manager.kubeconfig'
      register: kube_controller_manager

    - name: Create the kube-controller-manager.kubeconfig file
      shell: >
        kubectl config set-cluster {{ project_name }} \
          --certificate-authority=./tls/ca.pem \
          --embed-certs=true \
          --server=https://127.0.0.1:6443 \
          --kubeconfig=./kubeconfigs/kube-controller-manager.kubeconfig ;\

        kubectl config set-credentials system:kube-controller-manager \
          --client-certificate=./tls/kube-controller-manager.pem \
          --client-key=./tls/kube-controller-manager-key.pem \
          --embed-certs=true \
          --kubeconfig=./kubeconfigs/kube-controller-manager.kubeconfig ;\

        kubectl config set-context default \
          --cluster={{ project_name }} \
          --user=system:kube-controller-manager \
          --kubeconfig=./kubeconfigs/kube-controller-manager.kubeconfig

        kubectl config use-context default \
          --kubeconfig=./kubeconfigs/kube-controller-manager.kubeconfig
      when: kube_controller_manager.stat.exists == False

    - name: Check if the kube-scheduler.kubeconfig file exists
      stat:
        path: './kubeconfigs/kube-scheduler.kubeconfig'
      register: kube_scheduler

    - name: Create the kube-scheduler.kubeconfig file
      shell: >
        kubectl config set-cluster {{ project_name }} \
          --certificate-authority=./tls/ca.pem \
          --embed-certs=true \
          --server=https://127.0.0.1:6443 \
          --kubeconfig=./kubeconfigs/kube-scheduler.kubeconfig ;\

        kubectl config set-credentials system:kube-scheduler \
          --client-certificate=./tls/kube-scheduler.pem \
          --client-key=./tls/kube-scheduler-key.pem \
          --embed-certs=true \
          --kubeconfig=./kubeconfigs/kube-scheduler.kubeconfig ;\

        kubectl config set-context default \
          --cluster={{ project_name }} \
          --user=system:kube-scheduler \
          --kubeconfig=./kubeconfigs/kube-scheduler.kubeconfig

        kubectl config use-context default \
          --kubeconfig=./kubeconfigs/kube-scheduler.kubeconfig
      when: kube_scheduler.stat.exists == False

    - name: Check if the admin.kubeconfig file exists
      stat:
        path: './kubeconfigs/admin.kubeconfig'
      register: admin

    - name: Create the admin.kubeconfig file
      shell: >
        kubectl config set-cluster {{ project_name }} \
          --certificate-authority=./tls/ca.pem \
          --embed-certs=true \
          --server=https://127.0.0.1:6443 \
          --kubeconfig=./kubeconfigs/admin.kubeconfig ;\

        kubectl config set-credentials admin \
          --client-certificate=./tls/admin.pem \
          --client-key=./tls/admin-key.pem \
          --embed-certs=true \
          --kubeconfig=./kubeconfigs/admin.kubeconfig ;\

        kubectl config set-context default \
          --cluster={{ project_name }} \
          --user=system:admin \
          --kubeconfig=./kubeconfigs/admin.kubeconfig

        kubectl config use-context default \
          --kubeconfig=./kubeconfigs/admin.kubeconfig
      when: admin.stat.exists == False

    - name: 'Check if the {{ project_name }}.kubeconfig file exists'
      stat:
        path: './kubeconfigs/{{ project_name }}.kubeconfig'
      register: kubeconfig

    - name: Create the {{ project_name }}.kubeconfig file
      shell: >
        kubectl config set-cluster {{ project_name }} \
          --certificate-authority=./tls/ca.pem \
          --embed-certs=true \
          --server=https://{{ kubernetes_api_private_uri }} \
          --kubeconfig=./kubeconfigs/{{ project_name }}.kubeconfig

        kubectl config set-credentials admin \
          --client-certificate=./tls/admin.pem \
          --client-key=./tls/admin-key.pem \
          --kubeconfig=./kubeconfigs/{{ project_name }}.kubeconfig

        kubectl config set-context {{ project_name }} \
          --cluster={{ project_name }} \
          --user=admin \
          --kubeconfig=./kubeconfigs/{{ project_name }}.kubeconfig

        kubectl config use-context {{ project_name }} --kubeconfig=./kubeconfigs/{{ project_name }}.kubeconfig
      when: kubeconfig.stat.exists == False

    - name: 'Check if the encryption-config file exists'
      stat:
        path: './tls/encryption-config.yaml'
      register: encryption_config

    - name: Create the encryption config file
      template:
        src: ./templates/encryption-config.yaml
        dest: './tls/encryption-config.yaml'
        mode: '0644'
      vars:
        secret: "{{ lookup('password', 'head -c 32 /dev/urandom | base64') }}"
      when: encryption_config.stat.exists == False

- name: Create the kubeconfigs for the Worker nodes
  hosts: workers
  gather_facts: no
  serial: 1
  vars_files:
    - secret.yml
  tasks:
    - name: Check that the worker kubeconfig exists
      delegate_to: localhost
      stat:
        path: './kubeconfigs/{{ instance_id }}.kubeconfig'
      register: kubeconfig

    - name: Create the kubeconfig files for each worker node
      delegate_to: localhost
      shell: >
        kubectl config set-cluster {{ project_name }} \
          --certificate-authority=./tls/ca.pem \
          --embed-certs=true \
          --server=https://{{ kubernetes_api_public_uri }} \
          --kubeconfig=./kubeconfigs/{{ instance_id }}.kubeconfig ;\
        
        kubectl config set-credentials system:node:{{ instance_id }} \
          --client-certificate=./tls/{{ instance_id }}.pem \
          --client-key=./tls/{{ instance_id }}-key.pem \
          --embed-certs=true \
          --kubeconfig=./kubeconfigs/{{ instance_id }}.kubeconfig ;\
        
        kubectl config set-context default \
          --cluster={{ project_name }} \
          --user=system:node:{{ instance_id }} \
          --kubeconfig=./kubeconfigs/{{ instance_id }}.kubeconfig ;\
        
        kubectl config use-context default \
          --kubeconfig=./kubeconfigs/{{ instance_id }}.kubeconfig
      when: kubeconfig.stat.exists == False
    