---
- name: Create the Worker group
  hosts: local
  connection: local
  gather_facts: no
  vars_files:
    - secret.yml
  vars:
    node_type: master
    group_name: masters
  roles:
    - create_dynamic_node_group

- name: Create the Worker group
  hosts: local
  connection: local
  gather_facts: no
  vars_files:
    - secret.yml
  vars:
    node_type: worker
    group_name: workers
  roles:
    - create_dynamic_node_group

- name: TLS Configuration
  hosts: local
  connection: local
  gather_facts: no
  vars_files:
    - secret.yml
  tasks:
    - name: Copy ca-config.json
      template:
        src: ./templates/ca-config.json
        dest: './tls/ca-config.json'
        mode: '0644'
    
    - name: Copy ca-csr.json
      template:
        src: ./templates/ca-csr.json
        dest: './tls/ca-csr.json'
        mode: '0644'
    
    - name: Check that the ca-key exists
      stat:
        path: './tls/ca-key.pem'
      register: ca_key
    
    - name: Check that the ca.pem exists
      stat:
        path: './tls/ca.pem'
      register: ca
    
    - name: Generate the CA configuration file, certificate, and private key
      shell: "cfssl gencert -initca ./tls/ca-csr.json | cfssljson -bare ./tls/ca"
      when: ca_key.stat.exists == False and ca.stat.exists == False
    
    - name: Copy admin-csr.json
      template:
        src: ./templates/admin-csr.json
        dest: './tls/admin-csr.json'
        mode: '0644'
    
    - name: Check that the admin-key.pem exists
      stat:
        path: './tls/admin-key.pem'
      register: admin_key
    
    - name: Check that the admin.pem exists
      stat:
        path: './tls/admin.pem'
      register: admin
    
    - name: Generate the admin client certificate and private key
      shell: >
        cfssl gencert \
          -ca=./tls/ca.pem \
          -ca-key=./tls/ca-key.pem \
          -config=./tls/ca-config.json \
          -profile=kubernetes \
          ./tls/admin-csr.json | cfssljson -bare ./tls/admin
      when: admin_key.stat.exists == False and admin.stat.exists == False

    - name: Copy kube-controller-manager-csr.json
      template:
        src: ./templates/kube-controller-manager-csr.json
        dest: './tls/kube-controller-manager-csr.json'
        mode: '0644'
    
    - name: Check that the kube-controller-manager-key exists
      stat:
        path: './tls/kube-controller-manager-key.pem'
      register: kube_controller_manager_key
    
    - name: Check that the kube-controller-manager.pem exists
      stat:
        path: './tls/kube-controller-manager.pem'
      register: kube_controller_manager

    - name: Generate the Control Manager Client Certificate
      shell: >
        cfssl gencert \
          -ca=./tls/ca.pem \
          -ca-key=./tls/ca-key.pem \
          -config=./tls/ca-config.json \
          -profile=kubernetes \
          ./tls/kube-controller-manager-csr.json | cfssljson -bare ./tls/kube-controller-manager
      when: kube_controller_manager_key.stat.exists == False and kube_controller_manager.stat.exists == False

    - name: Copy kube-proxy-csr.json
      template:
        src: ./templates/kube-proxy-csr.json
        dest: './tls/kube-proxy-csr.json'
        mode: '0644'
    
    - name: Check that the kube-proxy-key exists
      stat:
        path: './tls/kube-proxy-key.pem'
      register: kube_proxy_key
    
    - name: Check that the kube-proxy.pem exists
      stat:
        path: './tls/kube-proxy.pem'
      register: kube_proxy

    - name: Generate the Kube Proxy Certificate
      shell: >
        cfssl gencert \
          -ca=./tls/ca.pem \
          -ca-key=./tls/ca-key.pem \
          -config=./tls/ca-config.json \
          -profile=kubernetes \
          ./tls/kube-proxy-csr.json | cfssljson -bare ./tls/kube-proxy
      when: kube_proxy_key.stat.exists == False and kube_proxy.stat.exists == False

    - name: Copy kube-scheduler-csr.json
      template:
        src: ./templates/kube-scheduler-csr.json
        dest: './tls/kube-scheduler-csr.json'
        mode: '0644'
    
    - name: Check that the kube-scheduler-key exists
      stat:
        path: './tls/kube-scheduler-key.pem'
      register: kube_scheduler_key
    
    - name: Check that the kube-scheduler.pem exists
      stat:
        path: './tls/kube-scheduler.pem'
      register: kube_scheduler

    - name: Generate the Kube Scheduler Certificate
      shell: >
        cfssl gencert \
          -ca=./tls/ca.pem \
          -ca-key=./tls/ca-key.pem \
          -config=./tls/ca-config.json \
          -profile=kubernetes \
          ./tls/kube-scheduler-csr.json | cfssljson -bare ./tls/kube-scheduler
      when: kube_scheduler_key.stat.exists == False and kube_scheduler.stat.exists == False

    - name: Copy kubernetes-csr.json
      template:
        src: ./templates/kubernetes-csr.json
        dest: './tls/kubernetes-csr.json'
        mode: '0644'
    
    - name: Check that the kubernetes-key exists
      stat:
        path: './tls/kubernetes-key.pem'
      register: kubernetes_key
    
    - name: Check that the kubernetes.pem exists
      stat:
        path: './tls/kubernetes.pem'
      register: kubernetes

    - name: Get master private IPs
      set_fact:
        private_ips: >
          {{ ( private_ips | default([]) ) + [hostvars[item]["ansible_host"]] }}
      loop: '{{ groups["masters"] }}'

    - name: Define the list of subject alternative names for the Kubernetes API Server certificate
      set_fact:
        alternative_names: >
          {{
            [
              "10.32.0.1",
              "127.0.0.1",
              "kubernetes",
              "kubernetes.default",
              "kubernetes.default.svc",
              "kubernetes.default.svc.cluster",
              "kubernetes.default.svc.cluster.local",
              "kubernetes.svc.cluster.local",
              "*.{{ public_domain }}",
              "*.{{ private_domain }}",
            ] 
            + private_ips
          }}

    - name: Generate the Kubernetes Certificate
      shell: >
        cfssl gencert \
          -ca=./tls/ca.pem \
          -ca-key=./tls/ca-key.pem \
          -config=./tls/ca-config.json \
          -hostname={{ alternative_names | join(',') }} \
          -profile=kubernetes \
          ./tls/kubernetes-csr.json | cfssljson -bare ./tls/kubernetes
      when: kubernetes_key.stat.exists == False and kubernetes.stat.exists == False

    - name: Copy service-account-csr.json
      template:
        src: ./templates/service-account-csr.json
        dest: './tls/service-account-csr.json'
        mode: '0644'
    
    - name: Check that the kubernetes-key exists
      stat:
        path: './tls/service-account-key.pem'
      register: service_account_key
    
    - name: Check that the service_account.pem exists
      stat:
        path: './tls/service-account.pem'
      register: service_account

    - name: Generate the Service Account Key Certificate
      shell: >
        cfssl gencert \
          -ca=./tls/ca.pem \
          -ca-key=./tls/ca-key.pem \
          -config=./tls/ca-config.json \
          -profile=kubernetes \
          ./tls/service-account-csr.json | cfssljson -bare ./tls/service-account
      when: service_account_key.stat.exists == False and service_account.stat.exists == False

- name: Create certificates for Worker nodes
  hosts: workers
  gather_facts: no
  vars_files:
    - secret.yml
  tasks:
    - name: Copy the instances json certificate request
      delegate_to: localhost
      template:
        src: ./templates/client-csr.json
        dest: './tls/{{ instance_id }}-csr.json'
        mode: '0644'

    - name: 'Check that the {{ instance_id }}-key.pem exists'
      delegate_to: localhost
      stat:
        path: './tls/{{ instance_id }}-key.pem'
      register: client_key

    - name: Check that the worker.pem exists
      delegate_to: localhost
      stat:
        path: './tls/{{ instance_id }}.pem'
      register: client

    - name: Generate the client certificate and private key
      delegate_to: localhost
      shell: >
        cfssl gencert \
          -ca=./tls/ca.pem \
          -ca-key=./tls/ca-key.pem \
          -config=./tls/ca-config.json \
          -hostname={{ instance_id }},{{ ansible_host }},{{ instance_id }}.{{ private_domain }} \
          -profile=kubernetes \
          ./tls/{{ instance_id }}-csr.json | cfssljson -bare ./tls/{{ instance_id }}
      when: client_key.stat.exists == False and client.stat.exists == False