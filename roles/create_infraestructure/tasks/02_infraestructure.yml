- name: Create the networking infraestructure
  cloudformation:
    stack_name: "{{ networking_stack_name }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: present
    region: "{{ aws_region }}"
    template: '{{ role_path }}/files/networking.yaml'
    disable_rollback: true
    template_parameters:
      KubernetesClusterName: '{{ project_name }}'
      PrivateHostedZoneName: '{{ private_domain }}'
    tags:
      Name: "{{ networking_stack_name }}"
      Project: "{{ project_name }}"
  register: networking

- name: Save Cloudformation Networking Output
  copy:
    content: "{{ networking | to_nice_yaml }}"
    dest: "{{ output_folder }}/networking.yaml"

- name: Create the EC2 Key
  ec2_key:
    name: '{{ key_name }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ aws_region }}'
    state: present
  register: ec2_key

- name: Save EC2 key
  copy:
    content: '{{ ec2_key.key.private_key }}'
    dest:  '{{ output_folder }}/{{ key_name }}.pem'
    mode: '0400'
  when: ec2_key.key.private_key is defined

- name: Create the Bastion Instance
  cloudformation:
    stack_name: '{{ bastion_stack_name }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    state: present
    region: '{{ aws_region }}'
    template: '{{ role_path }}/files/instance.yaml'
    disable_rollback: true
    template_parameters:
      InstanceName: '{{ bastion_instance_name }}'
      SecurityGroup: '{{ networking.stack_outputs.SecurityGroupId }}'
      KeyName: '{{ key_name }}'
      InstanceType: '{{ bastion_instance_type }}'
      ImageId: '{{ bastion_instance_image_id }}'
      SubnetId: '{{ networking.stack_outputs.PublicSubnet3 }}'
  register: instance

- name: Save Cloudformation Instance Output
  copy:
    content: '{{ instance | to_nice_yaml }}'
    dest: '{{ output_folder }}/instance.yaml'

- name: Create Cloudformation Auto Scaling Groups Stacks
  cloudformation:
    stack_name: '{{ asg_stack_name }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    state: present
    region: '{{ aws_region }}'
    template: '{{ role_path }}/files/auto_scaling_group.yaml'
    disable_rollback: true
    template_parameters:
      ProjectName: '{{ project_name }}'
      MasterAutoScalingGroupName: '{{ master_asg_name }}'
      WorkerAutoScalingGroupName: '{{ worker_asg_name }}'
      LaunchTemplateName: '{{ lt_name }}'
      SecurityGroup: '{{ networking.stack_outputs.SecurityGroupId }}'
      KeyName: '{{ key_name }}'
      InstanceType: '{{ asg_default_instance_type }}'
      ImageId: '{{ asg_image_id }}'
      VolumeSize: '{{ asg_volume_size }}'
      MasterDesiredCapacity: '{{ master_asg_desired_capacity }}'
      WorkerDesiredCapacity: '{{ worker_asg_desired_capacity }}'
      MinSize: '{{ asg_min_size }}'
      MaxSize: '{{ asg_max_size }}'
      PrivateSubnetIdA: '{{ networking.stack_outputs.PrivateSubnet0 }}'
      PrivateSubnetIdB: '{{ networking.stack_outputs.PrivateSubnet1 }}'
      PrivateSubnetIdC: '{{ networking.stack_outputs.PrivateSubnet2 }}'
      PublicSubnetIdA: '{{ networking.stack_outputs.PublicSubnet3 }}'
      PublicSubnetIdB: '{{ networking.stack_outputs.PublicSubnet4 }}'
      PublicSubnetIdC: '{{ networking.stack_outputs.PublicSubnet5 }}'
      NetworkLoadBalancerName: '{{ nlb_name }}'
      VpcId: '{{ networking.stack_outputs.VpcId }}'
  register: auto_scaling_group

- name: Save Cloudformation Auto Scaling Group Output
  copy:
    content: '{{ auto_scaling_group | to_nice_yaml }}'
    dest: '{{ output_folder }}/auto_scaling_group.yaml'

- name: Create the DNS record for the Kubernetes API Load Balancer
  route53:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    overwrite: true
    state: present
    zone: '{{ public_domain }}'
    record: '{{ kubernetes_api_public_url }}'
    type: A
    value: '{{ auto_scaling_group["stack_outputs"]["NetworkLoadBalancerDNSName"] }}'
    alias: True
    alias_hosted_zone_id: '{{ auto_scaling_group["stack_outputs"]["NetworkLoadBalancerCanonicalHostedZoneID"] }}'