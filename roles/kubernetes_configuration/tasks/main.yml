- name: Create the system:kube-apiserver-to-kubelet ClusterRole
  delegate_to: localhost
  k8s:
    state: present
    kubeconfig: '{{ kubeconfigs_folder }}/{{ project_name }}.kubeconfig'
    definition:
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRole
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:kube-apiserver-to-kubelet
      rules:
        - apiGroups:
            - ""
          resources:
            - nodes/proxy
            - nodes/stats
            - nodes/log
            - nodes/spec
            - nodes/metrics
          verbs:
            - "*"

- name: Bind the system:kube-apiserver-to-kubelet ClusterRole to the kubernetes user
  delegate_to: localhost
  k8s:
    state: present
    kubeconfig: '{{ kubeconfigs_folder }}/{{ project_name }}.kubeconfig'
    definition:
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: system:kube-apiserver
        namespace: ""
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:kube-apiserver-to-kubelet
      subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: User
          name: kubernetes

- name: Deploy the coredns cluster add-on
  k8s:
    state: present
    kubeconfig: '{{ kubeconfigs_folder }}/{{ project_name }}.kubeconfig'
    definition: '{{ lookup("file", role_path + "/files/coredns.yml") }}'

- name: Deploy the Kubernetes Dashboard application
  k8s:
    state: present
    kubeconfig: '{{ kubeconfigs_folder }}/{{ project_name }}.kubeconfig'
    definition: '{{ lookup("file", role_path + "/files/kubernetes-dashboard.yml") }}'

- name: Create the kubernetes-dashboard namespace
  k8s:
    state: present
    kubeconfig: '{{ kubeconfigs_folder }}/{{ project_name }}.kubeconfig'
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: kubernetes-dashboard
        labels:
          name: kubernetes-dashboard

- name: Create a service account with the name admin-user in namespace kubernetes-dashboard
  k8s:
    state: present
    kubeconfig: '{{ kubeconfigs_folder }}/{{ project_name }}.kubeconfig'
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: admin-user
        namespace: kubernetes-dashboard

- name: Create the ClusterRoleBinding for the admin-user
  k8s:
    state: present
    kubeconfig: '{{ kubeconfigs_folder }}/{{ project_name }}.kubeconfig'
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: admin-user
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
        - kind: ServiceAccount
          name: admin-user
          namespace: kubernetes-dashboard

- name: K9s Reader ClusterRole
  k8s:
    state: present
    kubeconfig: '{{ kubeconfigs_folder }}/{{ project_name }}.kubeconfig'
    definition:
      kind: ClusterRole
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: k9s
      rules:
        # Grant RO access to cluster resources node and namespace
        - apiGroups: [""]
          resources: ["nodes", "namespaces"]
          verbs: ["get", "list", "watch"]
        # Grant RO access to RBAC resources
        - apiGroups: ["rbac.authorization.k8s.io"]
          resources: ["clusterroles", "roles", "clusterrolebindings", "rolebindings"]
          verbs: ["get", "list", "watch"]
        # Grants RO access to CRD resources
        - apiGroups: ["apiextensions.k8s.io"]
          resources: ["customresourcedefinitions"]
          verbs: ["get", "list", "watch"]
        # Grants RO access to metric server
        - apiGroups: ["metrics.k8s.io"]
          resources: ["nodes", "pods"]
          verbs: ["get", "list", "watch"]

- name: K9s Reader ClusterRole
  k8s:
    state: present
    kubeconfig: '{{ kubeconfigs_folder }}/{{ project_name }}.kubeconfig'
    definition:
      # Sample K9s user ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: k9s
      subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: User
          name: kubernetes
      roleRef:
        kind: ClusterRole
        name: k9s
        apiGroup: rbac.authorization.k8s.io